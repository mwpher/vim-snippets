## Main
snippet header
	/*-----------------------------------------------------------------------------
	 *
	 * `Filename('', "My C Project")`
	 * ${1:Description}
	 * 
	 * Author: `g:snips_author`
	 * Date Created: `strftime("%Y-%m-%d")`
	 *
	 *-----------------------------------------------------------------------------*/

	${0}
# main
snippet main
	int main(int argc, const char *argv[]) {
		${0}
		return EXIT_SUCCESS;
	}
# main(void)
snippet mainn
	int main(void) {
		${0}
		return EXIT_SUCCESS;
	}
# Common libs
snippet libs
	#include <ctype.h>
	#include <errno.h>
	#include <limits.h>
	#include <math.h>
	#include <stdbool.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
##
## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0}
	#endif
# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */
##
## Control Statements
# if
snippet if
	if (${1:/* condition */}) {
		${2}
	}
# else
snippet el
	else {
		${1}
	}
# else if
snippet elif
	else if (${1:/* condition */}) {
		${2}
	}
# ifi
snippet ifi
	if (${1:/* condition */}) ${2};
# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
##
## Loops
# for
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
# for (custom)
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
# while
snippet wh
	while (${1:/* condition */}) {
		${2}
	}
# do... while
snippet do
	do {
		${2}
	} while (${1:/* condition */});
##
## Functions
# function definition
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
# function declaration
snippet fund
	${1:void} ${2:function_name}(${3});
##
## Types
# typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};
# typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};
# typedef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
##
## Input/Output
# printf
snippet pr
	printf("${1:%s}\\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\\n"${3});
# asprintf (allocate and write string)
snippet aspr
	char* ${1:s} = NULL;
	asprintf(**${1}, "${3:%s\\n}"${4});
	if (${1} == NULL) {
		fprintf(stderr, "couldn't allocate string ${1}, format string ${2}");
		exit(EXIT_FAILURE);
	}

	${0}

	free(${1});
	${1} = NULL;
# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{"verbose",	no_argument,	&verbose_flag, 'V'}*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				/* getopt_long will have already printed an error */
				break;

			default:
				/* Not sure how to get here... */
				return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}
# Files
snippet f
	FILE* ${1:fp};    /* Opening ${2:path/to/file.txt} */
	char* ${1}_name = "${2}";

	${1} = fopen(${1}_name, "${3:r}" );
	if (${1} == NULL) {
		fprintf(stderr, "couldn't open file '%s'; %s\\n",
				${1}_name, strerror(errno));
		exit (EXIT_FAILURE);
	}

	${0};

	if (fclose(${1}) == EOF) {    /* Closing ${2} */
		fprintf(stderr, "couldn't close file '%s'; %s\\n",
				${1}_name, strerror(errno));
		exit(EXIT_FAILURE);
	}
# malloc
snippet ma
	${1:ptr} = malloc(${2:sizeof(${3:type}}));
	if (${1} == NULL) {
		fprintf(stderr, "\\ndynamic memory allocation failed\\n");
		exit(EXIT_FAILURE);
	}

	${0};

	free(${1});
	${1} = NULL;
# calloc
snippet ca
	${1:ptr} = calloc((size_t)(${2:number}), sizeof(${3:char}) );
	if (${1} == NULL ) {
		fprintf(stderr, "\\ndynamic memory allocation failed\\n");
		exit(EXIT_FAILURE);
	}

	${0};

	free(${1});
	${1} = NULL;
snippet rea
	${1:ptr} = realloc(${1}, ${2:sizeof(${3:char}}));
	if (${1} == NULL) {
		fprintf(stderr, "\\ndynamic memory reallocation failed\\n");
		exit(EXIT_FAILURE);
	}
##
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
# GPL
snippet gpl
	/*
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, see <http://www.gnu.org/licenses/>.
	 *
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */

	${0}
snippet bsd
	/*
	 *  Redistribution and use in source and binary forms, with or without
	 *  modification, are permitted provided that the following conditions are met:
	 *  1. Redistributions of source code must retain the above copyright
	 *  notice, this list of conditions and the following disclaimer.
	 *  2. Redistributions in binary form must reproduce the above copyright
	 *  notice, this list of conditions and the following disclaimer in the
	 *  documentation and/or other materials provided with the distribution.
	 *  3. Neither the name of the ${3:organization} nor the
	 *  names of its contributors may be used to endorse or promote products
	 *  derived from this software without specific prior written permission.
	 *  
	 *  THIS SOFTWARE IS PROVIDED BY ${2:`g:snips_author`} ''AS IS'' AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 *  DISCLAIMED. IN NO EVENT SHALL $2 BE LIABLE FOR ANY
	 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *  
	 *  Copyright (C) `strftime("%Y")` ${2}
	 *  All rights reserved.
	 */

	${0}
